import Foundation

enum Instruction: Int, CaseIterable, CustomStringConvertible{
    case halt = 0
    case clrr = 1
    case clrx = 2
    case clrm = 3
    case clrb = 4
    case movir = 5
    case movrr = 6
    case movrm = 7
    case movmr = 8
    case movxr = 9
    case movar = 10
    case movb = 11
    case addir = 12
    case addrr = 13
    case addmr = 14
    case addxr = 15
    case subir = 16
    case subrr = 17
    case submr = 18
    case subxr = 19
    case mulir = 20
    case mulrr = 21
    case mulmr = 22
    case mulxr = 23
    case divir = 24
    case divrr = 25
    case divmr = 26
    case divxr = 27
    case jmp = 28
    case sojz = 29
    case sojnz = 30
    case aojz = 31
    case aojnz = 32
    case cmpir = 33
    case cmprr = 34
    case cmpmr = 35
    case jmpn = 36
    case jmpz = 37
    case jmpp = 38
    case jsr = 39
    case ret = 40
    case push = 41
    case pop = 42
    case stackc = 43
    case outci = 44
    case outcr = 45
    case outcx = 46
    case outcb = 47
    case readi = 48
    case printi = 49
    case readc = 50
    case readln = 51
    case brk = 52
    case movrx = 53
    case movxx = 54
    case outs = 55
    case nop = 56
    case jmpne = 57
    
    var description : String {
        switch self {
        // Use Internationalization, as appropriate.
        case .halt: return "halt"
        case .clrr: return "clrr"
        case .clrx: return "clrx"
        case .clrm: return "clrm"
        case .clrb: return "clrb"
        case .movir: return "movir"
        case .movrr: return "movrr"
        case .movrm: return "movrm"
        case .movmr: return "movmr"
        case .movxr: return "movxr"
        case .movar: return "movar"
        case .movb: return "movb"
        case .addir: return "addir"
        case .addmr: return "addmr"
        case .addxr: return "addxr"
        case .subir: return "subir"
        case .subrr: return "subrr"
        case .submr: return "submr"
        case .subxr: return "subxr"
        case .mulir: return "mulir"
        case .mulrr: return "mulrr"
        case .mulmr: return "mulmr"
        case .mulxr: return "mulxr"
        case .divir: return "divir"
        case .divrr: return "divrr"
        case .divmr: return "divmr"
        case .divxr: return "divxr"
        case .jmp: return "jmp"
        case .sojz: return "sojz"
        case .sojnz: return "sojnz"
        case .aojz: return "aojz"
        case .aojnz: return "aojnz"
        case .cmpir: return "cmpir"
        case .cmprr: return "cmprr"
        case .cmpmr: return "cmpmr"
        case .jmpn: return "jmpn"
        case .jmpz: return "jmpz"
        case .jmpp: return "jmpp"
        case .jsr: return "jsr"
        case .ret: return "ret"
        case .push: return "push"
        case .pop: return "pop"
        case .stackc: return "stackc"
        case .outci: return "outci"
        case .outcr: return "outcr"
        case .outcx: return "outcx"
        case .outcb: return "outcb"
        case .readi: return "readi"
        case .printi: return "printi"
        case .readc: return "readc"
        case .readln: return "readln"
        case .brk: return "break"
        case .movrx: return "movrx"
        case .movxx: return "movxx"
        case .outs: return "outs"
        case .nop: return "nop"
        case .jmpne: return "jmpne"
        default: return "Error: non-instruction"
        }
    }
    
    
    
    
}
