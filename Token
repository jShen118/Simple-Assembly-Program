import Foundation

struct Token: CustomStringConvertible {
    let type: TokenType
    let intValue: Int?
    let stringValue: String?
    let tupleValue: Tuple?
    
    init(_ type: TokenType, iValue: Int? = nil, sValue: String? = nil, tValue: Tuple? = nil) {
        self.type = type
        self.intValue = iValue
        self.stringValue = sValue
        self.tupleValue = tValue
    }
    
    var description: String {
        var toRet = "token type: \(type), value: "
        switch type{
        case .Register: toRet += stringValue!
            case .LabelDefinition: toRet += stringValue!
            case .Label: toRet += stringValue!
            case .ImmediateString: toRet += stringValue!
            case .ImmediateInteger: toRet += stringValue!
            case .ImmediateTuple: toRet += "\\\(tupleValue!.currentState)  \(tupleValue!.inputCharacter) \(tupleValue!.newState) \(tupleValue!.outputCharacter) \(tupleValue!.direction)\\"
            case .Instruction: toRet += stringValue!
            case .Directive: toRet += stringValue!
            default: toRet += "None"
        }
        return toRet
    }
}
